name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Add permissions configuration at the workflow level
permissions:
  contents: read
  packages: write
  id-token: write    # Needed for signing the images with cosign

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runs-on: ubuntu-24.04
            docker-platform: linux/amd64
          - platform: arm64
            runs-on: ubuntu-24.04-arm
            docker-platform: linux/arm64
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform }}-

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.docker-platform }}
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.platform }}-${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      - name: Save image
        run: |
          mkdir -p /tmp/images
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.platform }}-${{ github.sha }} -o /tmp/images/${{ matrix.platform }}-image.tar
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-image
          path: /tmp/images/${{ matrix.platform }}-image.tar
          retention-days: 1

  merge-and-cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download images
        uses: actions/download-artifact@v4
        with:
          name: amd64-image
          path: /tmp/images

      - name: Load images
        run: |
          docker load -i /tmp/images/amd64-image.tar
          docker load -i /tmp/images/arm64-image.tar

      - name: Create and push multi-arch manifest
        run: |
          # List all images
          docker images

          # Create manifest list and push it
          docker manifest push ${{ steps.meta.outputs.tags }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64-${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64-${{ github.sha }}

      # Sign the resulting Docker image
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.0'

      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          cosign sign --yes ${TAGS}
